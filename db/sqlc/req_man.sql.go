// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: req_man.sql

package db

import (
	"context"
	"encoding/json"
)

const addRequestToQueue = `-- name: AddRequestToQueue :one
INSERT INTO "req_queue" (req)
VALUES ($1) RETURNING req_id, req
`

func (q *Queries) AddRequestToQueue(ctx context.Context, req json.RawMessage) (ReqQueue, error) {
	row := q.db.QueryRowContext(ctx, addRequestToQueue, req)
	var i ReqQueue
	err := row.Scan(&i.ReqID, &i.Req)
	return i, err
}

const deleteFromQueue = `-- name: DeleteFromQueue :exec
DELETE FROM "req_queue"
WHERE req_id = $1
`

func (q *Queries) DeleteFromQueue(ctx context.Context, reqID int64) error {
	_, err := q.db.ExecContext(ctx, deleteFromQueue, reqID)
	return err
}

const getRequest = `-- name: GetRequest :one
SELECT req_id, req FROM "req_queue" WHERE req_id = $1
`

func (q *Queries) GetRequest(ctx context.Context, reqID int64) (ReqQueue, error) {
	row := q.db.QueryRowContext(ctx, getRequest, reqID)
	var i ReqQueue
	err := row.Scan(&i.ReqID, &i.Req)
	return i, err
}

const listRequests = `-- name: ListRequests :many
SELECT req_id, req FROM "req_queue"
`

func (q *Queries) ListRequests(ctx context.Context) ([]ReqQueue, error) {
	rows, err := q.db.QueryContext(ctx, listRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReqQueue{}
	for rows.Next() {
		var i ReqQueue
		if err := rows.Scan(&i.ReqID, &i.Req); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
